#include "sypha_test.h"

int test_launcher(SyphaEnvironment &env)
{
    int numTests = 0;
    int pass, numTestsPassed = 0;

    if (env.getTest().compare("scp4") == 0 || env.getTest().compare("all") == 0)
    {
        numTests += sypha_test_scp4(env, pass);
        numTestsPassed += pass;
    }
    if (env.getTest().compare("scp5") == 0 || env.getTest().compare("all") == 0)
    {
        numTests += sypha_test_scp5(env, pass);
        numTestsPassed += pass;
    }

    sypha_test_001();
}

int sypha_test_scp4(SyphaEnvironment &env, int &pass)
{
    int cnt = 0;
    int cntPass = 0;

    double results[] = {};

    for (int i = 0; i < 10; ++i)
    {
        for (int j = 0; j < env.testRepeat; ++j)
        {

            ++cnt;
        }
    }

    pass = cntPass;
    return cnt;
}

int sypha_test_scp5(SyphaEnvironment &env, int &pass)
{
    int cnt = 0;
    int cntPass = 0;

    double results[] = {};

    for (int i = 0; i < 10; ++i)
    {
        for (int j = 0; j < env.testRepeat; ++j)
        {

            ++cnt;
        }
    }

    pass = cntPass;
    return cnt;
}

int sypha_test_001()
{
    cudaStream_t cudaStream;
    cublasHandle_t cublasHandle;
    cusparseHandle_t cusparseHandle;
    cusolverDnHandle_t cusolverDnHandle;
    cusolverSpHandle_t cusolverSpHandle;

    // initialize a cuda stream for this node
    checkCudaErrors(cudaStreamCreate(&cudaStream));

    checkCudaErrors(cublasCreate(&cublasHandle));
    checkCudaErrors(cusparseCreate(&cusparseHandle));
    checkCudaErrors(cusolverDnCreate(&cusolverDnHandle));
    checkCudaErrors(cusolverSpCreate(&cusolverSpHandle));

    // bind stream to cusparse and cusolver
    checkCudaErrors(cublasSetStream(cublasHandle, cudaStream));
    checkCudaErrors(cusparseSetStream(cusparseHandle, cudaStream));
    checkCudaErrors(cusolverDnSetStream(cusolverDnHandle, cudaStream));
    checkCudaErrors(cusolverSpSetStream(cusolverSpHandle, cudaStream));

    ///////////////////             TEST PARAMS
    int i, j;
    int reorder = 0;
    int singularity = 0;

    double CHECK_TOL = 1.E-10;
    double SING_TOL = 1.E-16;

    // Trivial system
    // int A_nrows = 3;
    // int A_ncols = 3;
    // int A_nnz = 4;

    // int h_csrAOffs[] = {0, 2, 3, 4};
    // int h_csrAInds[] = {0, 2, 1, 0};
    // double h_csrAVals[] = {1.0, 1.0, 1.0, 1.0};
    // double h_b[] = {1.0, 1.0, 1.0};
    // double *h_x = (double *)malloc(sizeof(double) * A_nrows);

    // System from demo 00
    // int A_nrows = 12;
    // int A_ncols = 12;
    // int A_nnz = 25;

    // int h_csrAOffs[] = {   0,    2,    4,    6,    8,   10,   13,   15,   17,   19,   21,   23,   25 };
    // int h_csrAInds[] = {   5,    7,    6,    8,    5,    9,    5,   10,    6,   11,    0,    2,    3,    1,    4,    0,    7,    1,    8,    2,    9,    3,   10,    4,   11};
    // double h_csrAVals[] = { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, -1.000000, 1.000000, -1.000000, 1.000000, 1.000000, 1.000000, -1.000000, 1.000000, -1.000000, 0.275510, 1.458333, 0.775510, 1.625000, 1.275510, 1.458333, 1.275510, 0.791667, 0.775510, 0.625000};
    // double h_b[] = {-0.275510, -0.275510, -0.275510, -0.275510, -0.275510, -1.125000, 0.000000, -0.401786, -1.260204, -1.860119, -1.009779, -0.484694};
    // double *h_x = (double *)malloc(sizeof(double) * A_nrows);

    // System from scp demo 00
    int A_nrows = 260;
    int A_ncols = 260;
    int A_nnz = 1336;

    int h_csrAOffs[] = {   0,    7,   16,   20,   22,   26,   30,   39,   45,   49,   55,   60,   65,   68,   74,   79,   83,   86,   96,  103,  108,  111,  117,  124,  131,  133,  137,  141,  144,  148,  152,  158,  166,  171,  179,  187,  191,  195,  201,  204,  209,  212,  220,  227,  228,  231,  233,  242,  248,  254,  257,  264,  274,  280,  285,  292,  300,  308,  314,  321,  327,  335,  343,  348,  354,  360,  365,  371,  377,  381,  386,  390,  394,  402,  405,  410,  417,  424,  430,  436,  438,  446,  452,  459,  467,  473,  483,  488,  492,  495,  501,  510,  523,  527,  533,  541,  548,  551,  558,  565,  568,  570,  572,  574,  576,  578,  580,  582,  584,  586,  588,  590,  592,  594,  596,  598,  600,  602,  604,  606,  608,  634,  662,  683,  707,  729,  756,  779,  802,  823,  848,  870,  894,  922,  951,  976,  998, 1019, 1047, 1071, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 1164, 1166, 1168, 1170, 1172, 1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226, 1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 1276, 1278, 1280, 1282, 1284, 1286, 1288, 1290, 1292, 1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324, 1326, 1328, 1330, 1332, 1334, 1336};
    int h_csrAInds[] = { 127,  129,  132,  135,  137,  139,  140,  120,  122,  125,  127,  128,  129,  137,  139,  141,  121,  126,  137,  142,  125,  143,  125,  131,  134,  144,  127,  131,  137,  145,  120,  121,  122,  127,  129,  130,  134,  139,  146,  122,  124,  133,  134,  138,  147,  121,  128,  137,  148,  120,  121,  125,  136,  137,  149,  123,  124,  128,  131,  150,  121,  129,  135,  136,  151,  120,  124,  152,  120,  122,  123,  126,  139,  153,  130,  131,  137,  139,  154,  133,  134,  139,  155,  121,  129,  156,  121,  126,  127,  128,  129,  131,  132,  137,  138,  157,  123,  126,  128,  129,  132,  135,  158,  120,  127,  132,  133,  159,  122,  123,  160,  121,  122,  130,  131,  133,  161,  121,  122,  125,  126,  131,  132,  162,  126,  129,  131,  136,  138,  139,  163,  130,  164,  125,  128,  135,  165,  128,  137,  138,  166,  121,  134,  167,  125,  134,  137,  168,  120,  130,  132,  169,  123,  132,  134,  135,  138,  170,  121,  122,  124,  125,  126,  132,  139,  171,  120,  121,  136,  138,  172,  121,  127,  132,  133,  135,  136,  138,  173,  120,  127,  130,  132,  133,  134,  139,  174,  127,  132,  138,  175,  123,  133,  138,  176,  123,  124,  129,  132,  136,  177,  120,  135,  178,  130,  134,  136,  137,  179,  120,  124,  180,  122,  125,  126,  127,  130,  133,  135,  181,  122,  123,  128,  133,  136,  137,  182,  183,  133,  139,  184,  127,  185,  121,  122,  127,  129,  133,  134,  136,  139,  186,  123,  126,  127,  130,  132,  187,  123,  124,  129,  130,  137,  188,  125,  128,  189,  123,  125,  129,  131,  133,  134,  190,  120,  121,  126,  128,  129,  132,  133,  135,  136,  191,  126,  127,  128,  130,  138,  192,  130,  133,  137,  138,  193,  120,  121,  131,  132,  134,  135,  194,  122,  124,  126,  133,  135,  137,  138,  195,  122,  124,  125,  133,  137,  138,  139,  196,  122,  125,  127,  133,  137,  197,  120,  122,  124,  125,  131,  136,  198,  125,  129,  133,  138,  139,  199,  121,  123,  125,  127,  130,  133,  137,  200,  125,  127,  130,  132,  135,  136,  137,  201,  129,  130,  134,  135,  202,  120,  123,  124,  134,  139,  203,  120,  129,  135,  136,  138,  204,  123,  126,  134,  135,  205,  120,  121,  126,  127,  132,  206,  128,  129,  131,  134,  137,  207,  128,  129,  131,  208,  125,  126,  131,  137,  209,  120,  123,  124,  210,  124,  128,  129,  211,  121,  122,  126,  128,  132,  134,  138,  212,  125,  127,  213,  120,  125,  130,  131,  214,  123,  125,  129,  135,  136,  139,  215,  120,  124,  126,  127,  131,  132,  216,  121,  129,  130,  132,  134,  217,  126,  130,  131,  138,  139,  218,  121,  219,  123,  125,  133,  134,  137,  138,  139,  220,  124,  125,  126,  127,  137,  221,  120,  123,  133,  135,  138,  139,  222,  120,  121,  124,  131,  132,  134,  135,  223,  122,  130,  132,  133,  139,  224,  123,  124,  125,  128,  131,  132,  136,  137,  139,  225,  122,  123,  136,  139,  226,  135,  136,  138,  227,  124,  133,  228,  126,  129,  133,  134,  139,  229,  121,  123,  124,  130,  131,  133,  135,  137,  230,  121,  124,  125,  128,  129,  130,  131,  133,  134,  136,  137,  138,  231,  128,  131,  134,  232,  122,  126,  127,  132,  136,  233,  120,  121,  124,  125,  128,  132,  139,  234,  120,  121,  122,  128,  133,  135,  235,  131,  133,  236,  120,  123,  132,  136,  137,  138,  237,  121,  123,  126,  134,  138,  139,  238,  129,  132,  239,  120,  240,  121,  241,  122,  242,  123,  243,  124,  244,  125,  245,  126,  246,  127,  247,  128,  248,  129,  249,  130,  250,  131,  251,  132,  252,  133,  253,  134,  254,  135,  255,  136,  256,  137,  257,  138,  258,  139,  259,   54,   95,   32,   58,   51,   64,    1,    9,   82,   94,   76,   13,   66,   29,   83,   97,   34,   12,   38,   70,   19,   63,   74,   40,    6,  100,   77,   11,   51,   17,    8,   94,   90,   72,   21,   98,   31,   22,    2,   91,   60,   32,   54,   66,   46,    6,   95,   33,   83,   27,   16,    9,   79,  101,   31,   46,   55,   58,   56,   42,   41,    7,   13,   72,   22,   86,   84,    1,    6,   57,   93,   20,   21,   95,  102,   70,   82,   37,   90,   10,   20,   75,   60,   65,   50,   85,   47,   18,   80,   36,   98,   13,   30,   97,   63,   86,   42,   48,  103,   56,   48,   70,   40,   37,   12,   71,   94,   63,   83,   90,   76,   55,    7,   88,   31,   91,   85,   81,   10,   58,  104,   75,   69,    1,   74,   80,   50,   59,   49,   91,    9,   60,   81,   25,    4,   85,   73,   31,   61,   57,   41,   94,    3,   22,   58,   28,   56,  105,   89,   93,   66,   52,   41,   31,   78,    2,   47,   17,   81,   65,   51,   13,   76,   69,   55,   23,   22,   18,   98,   72,  106,   57,   81,   60,    6,   47,   41,   93,   33,   19,    5,   45,   66,   76,   52,    1,   34,   73,   17,   35,    0,   61,   46,  107,   51,   68,   95,   94,    1,   85,    8,   42,   72,   18,   10,   49,   25,   91,   92,   17,   52,   71,   67,   26,  108,   68,   46,    0,   89,   11,   77,   64,   99,   50,   59,   62,   48,   71,   23,   75,   37,   67,   18,    1,   16,   51,   91,    6,   17,  109,   53,   74,   91,   90,   24,   77,    6,   78,   60,   29,   48,   52,   84,   14,   62,   34,   47,   41,   61,   39,   21,  110,   54,   22,   76,   10,   96,    4,   92,   83,   14,   58,   17,   74,   69,   91,   21,   23,   78,   67,   50,   90,   85,   68,    5,  111,   33,   93,   83,   34,   35,   17,   31,   76,   66,    0,   77,   85,   99,   94,   84,   54,   61,   51,   37,   47,   18,   19,   97,   22,   72,   30,   29,  112,   41,   88,   89,   21,    7,   56,   96,   80,   33,   84,   53,   57,   91,   46,   36,   60,   59,   19,   55,   44,   95,   90,   51,   42,   15,   50,   82,   34,  113,   80,   15,   28,   46,   65,    7,   62,   89,   72,   63,   91,   27,    4,   30,   98,   67,    6,   50,   92,   34,   39,   54,   77,   83,  114,   83,   75,   25,   64,   11,   18,   41,   87,   30,   62,   61,   95,   65,   55,   51,   82,   38,   54,   33,    0,   90,  115,   37,   87,   23,   58,   85,   32,   97,   86,   11,   75,   51,    9,   42,   64,   61,   93,   46,   33,   39,   91,  116,   42,   28,   26,   56,   97,    0,   60,   17,   90,    1,   91,   55,   39,    9,   14,   69,   67,   57,    8,   53,   81,   85,   61,   48,   80,    5,    2,  117,   82,   56,   53,   30,   17,   97,   64,   59,   26,   72,   33,   23,   91,   35,   52,   87,   55,   32,   78,   80,   36,   98,    7,  118,   82,   13,   85,   78,   86,   46,    6,    1,   15,   80,   14,   84,   59,   63,   75,   89,   94,   31,   98,   56,   44,   23,    0,   34,  119,    0,  140,    1,  141,    2,  142,    3,  143,    4,  144,    5,  145,    6,  146,    7,  147,    8,  148,    9,  149,   10,  150,   11,  151,   12,  152,   13,  153,   14,  154,   15,  155,   16,  156,   17,  157,   18,  158,   19,  159,   20,  160,   21,  161,   22,  162,   23,  163,   24,  164,   25,  165,   26,  166,   27,  167,   28,  168,   29,  169,   30,  170,   31,  171,   32,  172,   33,  173,   34,  174,   35,  175,   36,  176,   37,  177,   38,  178,   39,  179,   40,  180,   41,  181,   42,  182,   43,  183,   44,  184,   45,  185,   46,  186,   47,  187,   48,  188,   49,  189,   50,  190,   51,  191,   52,  192,   53,  193,   54,  194,   55,  195,   56,  196,   57,  197,   58,  198,   59,  199,   60,  200,   61,  201,   62,  202,   63,  203,   64,  204,   65,  205,   66,  206,   67,  207,   68,  208,   69,  209,   70,  210,   71,  211,   72,  212,   73,  213,   74,  214,   75,  215,   76,  216,   77,  217,   78,  218,   79,  219,   80,  220,   81,  221,   82,  222,   83,  223,   84,  224,   85,  225,   86,  226,   87,  227,   88,  228,   89,  229,   90,  230,   91,  231,   92,  232,   93,  233,   94,  234,   95,  235,   96,  236,   97,  237,   98,  238,   99,  239,  100,  240,  101,  241,  102,  242,  103,  243,  104,  244,  105,  245,  106,  246,  107,  247,  108,  248,  109,  249,  110,  250,  111,  251,  112,  252,  113,  253,  114,  254,  115,  255,  116,  256,  117,  257,  118,  258,  119,  259};
    double h_csrAVals[] = {
};

    double h_b[] = {};
    double *h_x = (double *)malloc(sizeof(double) * A_nrows);

    int *d_csrAInds = NULL;
    int *d_csrAOffs = NULL;
    double *d_csrAVals = NULL;

    double *d_b = NULL;
    double *d_x = NULL;

    cusparseMatDescr_t A_descr;

    checkCudaErrors(cusparseCreateMatDescr(&A_descr));
    checkCudaErrors(cusparseSetMatType(A_descr, CUSPARSE_MATRIX_TYPE_GENERAL));
    checkCudaErrors(cusparseSetMatIndexBase(A_descr, CUSPARSE_INDEX_BASE_ZERO));

    checkCudaErrors(cudaMalloc((void **)&d_csrAInds, sizeof(int) * A_nnz));
    checkCudaErrors(cudaMalloc((void **)&d_csrAOffs, sizeof(int) * (A_nrows + 1)));
    checkCudaErrors(cudaMalloc((void **)&d_csrAVals, sizeof(double) * A_nnz));

    checkCudaErrors(cudaMalloc((void **)&d_b, sizeof(double) * A_nrows));
    checkCudaErrors(cudaMalloc((void **)&d_x, sizeof(double) * A_nrows));

    checkCudaErrors(cudaMemcpy(d_csrAInds, h_csrAInds, sizeof(int) * A_nnz, cudaMemcpyHostToDevice));
    checkCudaErrors(cudaMemcpy(d_csrAOffs, h_csrAOffs, sizeof(int) * (A_nrows + 1), cudaMemcpyHostToDevice));
    checkCudaErrors(cudaMemcpy(d_csrAVals, h_csrAVals, sizeof(double) * A_nnz, cudaMemcpyHostToDevice));

    checkCudaErrors(cudaMemcpy(d_b, h_b, sizeof(double) * A_nrows, cudaMemcpyHostToDevice));

    printf("SYPHA TEST - Solving system with QR [GPU] cusolverSpDcsrlsvqr (rows: %d, cols: %d, nnz: %d)\n", A_nrows, A_ncols, A_nnz);
    checkCudaErrors(cusolverSpDcsrlsvqr(cusolverSpHandle,
                                        A_nrows, A_nnz, A_descr,
                                        d_csrAVals, d_csrAOffs, d_csrAInds,
                                        d_b,
                                        SING_TOL, reorder,
                                        d_x, &singularity));
    printf("SYPHA TEST - Solution (singularity: %d)\n", singularity);
    //utils_printDvec(A_nrows, d_x, true);

    // printf("SYPHA TEST - Solving system with CHOL [GPU] cusolverSpDcsrlsvchol (rows: %d, cols: %d, nnz: %d)\n", A_nrows, A_ncols, A_nnz);
    // checkCudaErrors(cusolverSpDcsrlsvchol(cusolverSpHandle,
    //                                       A_nrows, A_nnz, A_descr,
    //                                       d_csrAVals, d_csrAOffs, d_csrAInds,
    //                                       d_b,
    //                                       SING_TOL, reorder,
    //                                       d_x, &singularity));
    // printf("SYPHA TEST - Solution (singularity: %d)\n", singularity);
    // utils_printDvec(A_nrows, d_x, true);

    printf("SYPHA TEST - Solving system with QR [CPU] cusolverSpDcsrlsvqrHost (rows: %d, cols: %d, nnz: %d)\n", A_nrows, A_ncols, A_nnz);
    checkCudaErrors(cusolverSpDcsrlsvqrHost(cusolverSpHandle,
                                        A_nrows, A_nnz, A_descr,
                                        h_csrAVals, h_csrAOffs, h_csrAInds,
                                        h_b,
                                        SING_TOL, reorder,
                                        h_x, &singularity));
    printf("SYPHA TEST - Solution (singularity: %d)\n", singularity);
    //utils_printDvec(A_nrows, h_x, false);

    // printf("SYPHA TEST - Solving system with CHOL [CPU] cusolverSpDcsrlsvcholHost (rows: %d, cols: %d, nnz: %d)\n", A_nrows, A_ncols, A_nnz);
    // checkCudaErrors(cusolverSpDcsrlsvcholHost(cusolverSpHandle,
    //                                       A_nrows, A_nnz, A_descr,
    //                                       h_csrAVals, h_csrAOffs, h_csrAInds,
    //                                       h_b,
    //                                       SING_TOL, reorder,
    //                                       h_x, &singularity));
    // printf("SYPHA TEST - Solution (singularity: %d)\n", singularity);
    // utils_printDvec(A_nrows, h_x, false);

    ///////////////////             RESIDUALS
    bool checkFlag = true;
    double dot;
    double *buff = (double *)malloc(sizeof(double) * A_nrows);
    checkCudaErrors(cudaMemcpy(buff, d_x, sizeof(double) * A_nrows, cudaMemcpyDeviceToHost));
    for (i = 0; i < A_nrows; ++i)
    {
        dot = 0.0;
        for (j = h_csrAOffs[i]; j < h_csrAOffs[i+1]; ++j)
        {
            dot += h_csrAVals[j] * buff[h_csrAInds[j]];
        }

        if (abs(h_b[i] - dot) > CHECK_TOL)
        {
            checkFlag = false;
            printf("b[%d] = %lf, prod = %lf\n", i, h_b[i], dot);
            break;
        }
    }

    if (checkFlag)
    {
        printf("GPU sol PASSED\n");
    } else {
        printf("GPU sol NOT PASSED\n");
    }
    free(buff);

    checkFlag = true;
    for (i = 0; i < A_nrows; ++i)
    {
        dot = 0.0;
        for (j = h_csrAOffs[i]; j < h_csrAOffs[i + 1]; ++j)
        {
            dot += h_csrAVals[j] * h_x[h_csrAInds[j]];
        }

        if (abs(h_b[i] - dot) > CHECK_TOL)
        {
            checkFlag = false;
            printf("b[%d] = %lf, prod = %lf\n", i, h_b[i], dot);
            break;
        }
    }

    if (checkFlag)
    {
        printf("CPU sol PASSED\n");
    }
    else
    {
        printf("CPU sol NOT PASSED\n");
    }
    free(h_x);

    checkCudaErrors(cudaFree(d_csrAInds));
    checkCudaErrors(cudaFree(d_csrAOffs));
    checkCudaErrors(cudaFree(d_csrAVals));

    checkCudaErrors(cudaFree(d_b));
    checkCudaErrors(cudaFree(d_x));

    if (A_descr) checkCudaErrors(cusparseDestroyMatDescr(A_descr));

    if (cublasHandle) checkCudaErrors(cublasDestroy(cublasHandle));
    if (cusparseHandle) checkCudaErrors(cusparseDestroy(cusparseHandle));
    if (cusolverDnHandle) checkCudaErrors(cusolverDnDestroy(cusolverDnHandle));
    if (cusolverSpHandle) checkCudaErrors(cusolverSpDestroy(cusolverSpHandle));

    if (cudaStream) checkCudaErrors(cudaStreamDestroy(cudaStream));
}



